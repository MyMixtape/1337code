/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if ( lists.length == 0 ) return null;
        
        List<ListNode> list = new ArrayList();
        for (ListNode node : lists)
            list.add(node);
        
        while ( list.size() != 1 ) {
            ListNode node1 = list.remove(0);
            ListNode node2 = list.remove(0);
            
            ListNode head = new ListNode();
            ListNode dummy = head;
            while (node1 != null && node2 != null) {    
                if ( node1.val <= node2.val) { 
                    dummy.next = new ListNode(node1.val);
                    node1 = node1.next;
                }
                else if ( node2.val <= node1.val ) {
                    dummy.next = new ListNode(node2.val);
                    node2 = node2.next;
                }
                
                dummy = dummy.next;
            }
            if ( node1 == null ) dummy.next = node2;
            if ( node2 == null ) dummy.next = node1;
            list.add(head.next);
        }
        
        
        return list.get(0);
    }
}
